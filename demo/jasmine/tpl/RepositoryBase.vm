#macro(name $rawName)
${rawName.substring(0,1).toLowerCase()}${rawName.substring(1)}##
#end
package $model.repoPkg;

import ${model.entityPkg}.${model.table.className};
import org.apache.ibatis.annotations.Param;
import org.springframework.data.domain.Pageable;

import java.util.List;

/**
 * ${model.table.className}RepositoryBase.
 * auto generated by jasmine, please do not modify it!
 */
public interface ${model.table.className}RepositoryBase{
    /**
     *##
#if($model.deleteColumn)
 logical delete
#else
 physical delete
#end
     * @param id
     * @return
     */
    int deleteByPrimaryKey(#foreach($column in $model.table.pks)##
@Param("${column.fieldName}") ${column.javaType} ${column.fieldName}##
#if($foreach.hasNext ), #end##
#end);


    ${model.table.className} selectByPrimaryKey(#foreach($column in $model.table.pks)##
@Param("${column.fieldName}") ${column.javaType} ${column.fieldName}##
#if($foreach.hasNext ), #end##
#end);


    /**
     * insert entity
     * @param #name(${model.table.className})

     * @return
     */
    int insert(@Param("#name(${model.table.className})") ${model.table.className} #name(${model.table.className}));

    /**
     * insert entity selective.
     * @param #name(${model.table.className})

     * @return
     */
    int insertSelective(@Param("#name(${model.table.className})") ${model.table.className} #name(${model.table.className}));

    /**
     * batch insert entity
     * @param list
     */
    void insertBatch(@Param("list") List<${model.table.className}> list);

    /**
     *##
#if($model.versionColumn)
 update with optimistic lock
#else
 update
#end
     * @param #name(${model.table.className})

     * @return
     */
    int updateByPrimaryKey(@Param("#name(${model.table.className})") ${model.table.className} #name(${model.table.className}));

    /**
     *##
#if($model.versionColumn)
 update with optimistic lock##
#else
 update##
#end selective
     * @param #name(${model.table.className})

     * @return
     */
    int updateByPrimaryKeySelective(@Param("#name(${model.table.className})") ${model.table.className} #name(${model.table.className}));



    /**
     * selectCount
     * @param #name(${model.table.className})

     * @return
     */
    int selectCount(@Param("#name(${model.table.className})") ${model.table.className} #name(${model.table.className}));

    /**
     * selectPage
     * @param #name(${model.table.className})

     * @return
     */
    List<${model.table.className}> selectPage(@Param("#name(${model.table.className})") ${model.table.className} #name(${model.table.className}), @Param("pageable") Pageable pageable);

}
